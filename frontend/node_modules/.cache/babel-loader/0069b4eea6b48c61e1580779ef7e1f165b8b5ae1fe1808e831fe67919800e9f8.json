{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst name = localStorage.getItem(\"itemName\");\nconst initialState = {\n  name: name ? name : \"\",\n  inventItem: {\n    itemName: \"\",\n    sku: \"\",\n    recieveDate: \"\",\n    category: \"\",\n    condition: \"\",\n    brand: \"\",\n    initialPrice: \"\",\n    initialQuantity: \"\",\n    totalPrice: \"\",\n    supplier: \"\"\n  }\n};\nconst inventSlice = createSlice({\n  name: \"invent\",\n  initialState,\n  reducers: {\n    SET_NAME(state, action) {\n      localStorage.setItem(\"itemName\", JSON.stringify(action.payload));\n      state.name = action.payload;\n    },\n    SET_INVENT(state, action) {\n      const itemDetail = action.payload;\n      state.inventItem.itemName = itemDetail.itemName;\n      state.inventItem.sku = itemDetail.sku;\n      state.inventItem.recieveDate = itemDetail.recieveDate;\n      state.inventItem.category = itemDetail.category;\n      state.inventItem.condition = itemDetail.condition;\n      state.inventItem.brand = itemDetail.brand;\n      state.inventItem.initialPrice = itemDetail.initialPrice;\n      state.inventItem.initialQuantity = itemDetail.initialQuantity;\n      state.inventItem.totalPrice = itemDetail.totalPrice;\n      state.inventItem.supplier = itemDetail.supplier;\n    }\n  }\n});\nexport const {\n  SET_NAME,\n  SET_INVENT\n} = inventSlice.actions;\n\n//exporting an inidividual state\nexport const selectName = state => state.invent.inventName;\nexport const selectInvent = state => state.invent.inventItem;\nexport default inventSlice.reducer;\n\n/*import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport inventService from \"./inventService\";\r\n\r\n\r\nconst initialState ={\r\n    invent: null,\r\n    invents: [],\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: \"\",\r\n\r\n};\r\n\r\n//create new invent item and createAsyncThunk to execute http request\r\nexport const createInvent = createAsyncThunk(\r\n    \"invents/create\",\r\n    async(formData, thunkAPI) =>{\r\n        try {\r\n            return await inventService.createInvent(formData)\r\n\r\n        } catch (error) {\r\n            const message = (\r\n            error.response && error.response.data && error.response.data.message\r\n           ) \r\n           || error.message \r\n           || error.toString();\r\n\r\n           console.log(message);\r\n           return thunkAPI.rejectWithValue(message)\r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst inventSlice = createSlice({\r\n    name: \"invent\",\r\n    initialState,\r\n    reducers: {\r\n        CALC_STORE_VALUE(state, action){\r\n            console.log(\"Invent value\");\r\n        }\r\n    },\r\n    extraReducers:(builder) =>{\r\n        builder\r\n        .addCase(createInvent.pending, (state) =>{\r\n            state.isLoading = true;\r\n        })\r\n        .addCase(createInvent.fulfilled, (state, action) =>{\r\n            state.isLoading = false;\r\n            state.isSuccess = true;\r\n            state.isError = false;\r\n            console.log(action.payload);\r\n            state.invents.push (action.payload);\r\n            console.success (\"Item added Successfully\")\r\n        })\r\n        .addCase(createInvent.rejected, (state, action) =>{\r\n            state.isLoading = false;\r\n            state.isError = true;\r\n            state.message = action.payload;\r\n            console.error(action.payload);           \r\n        })\r\n    }\r\n});\r\n\r\nexport const {CALC_STORE_VALUE} = inventSlice.actions;\r\nexport const selectIsLoading = (state) => state.invent.isLoading;\r\nexport default inventSlice.reducer*/\n\n/*import { createSlice } from '@reduxjs/toolkit'\r\nconst name = JSON.parse(localStorage.getItem(\"name\"))\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n\r\n    name: name ? name : \"\",\r\n    inventory: {\r\n        itemName: \"\",\r\n        sku: \"\",\r\n        recieveDate: \"\",\r\n        category: \"\",\r\n        condition: \"\",\r\n        brand: \"\",\r\n        initialPrice: \"\",\r\n        initialQuantity: \"\",\r\n        totalPrice: \"\",\r\n        supplier: \"\",\r\n    },\r\n}\r\n\r\nconst inventSlice = createSlice({\r\n    name: \"inventItem\",\r\n    initialState,\r\n    reducers: {\r\n        \r\n        SET_INVENT(state, action) {\r\n            const invent = action.payload;\r\n            state.inventory.itemName = invent.itemName;\r\n            state.inventory.sku = invent.sku;\r\n            state.inventory.recieveDate = invent.recieveDate;\r\n            state.inventory.category = invent.category;\r\n            state.inventory.condition = invent.condition;\r\n            state.inventory.brand = invent.brand;\r\n            state.inventory.initialPrice = invent.initialPrice;\r\n            state.inventory.initialQuantity = invent.initialQuantity;\r\n            state.inventory.totalPrice = invent.totalPrice;\r\n            state.inventory.supplier = invent.supplier;\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const {SET_INVENT } = inventSlice.actions;\r\n\r\n//exporting an individual state\r\nexport const selectIsLoggedIn = (state) => state.inventItem.isLoggedIn\r\nexport const selectName = (state) => state.inventItem.name\r\nexport const selectInvent = (state) => state.inventItem.inventory\r\nexport const selectFilteredInvent = (state) => state.inventItem.filteredInvent;\r\n\r\nexport default inventSlice.reducer;*/\n\n//import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\n//import inventService from \"./inventService\";\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {toast} from 'react-toastify'\r\n\r\nconst initialState = {\r\n    inventItem: null,\r\n    inventItems: [],\r\n    isError: false,\r\n    isSucess:false,\r\n    isLoading: false,\r\n    message:\"\",\r\n    totalInventValue: 0,\r\n    outOfStock: 0,\r\n    category: [],\r\n};\r\n\r\n//CREATE NEW INVENT ITEM\r\nexport const createInvent = createAsyncThunk(\r\n    \"InventItems/create\",\r\n    async(formData, thunkAPI) => {\r\n        try {\r\n            return await inventService.createInvent(formData)\r\n\r\n        } catch (error) {\r\n            const message = (error.response && error.response.data && \r\n                error.response.data.message) \r\n                || error.message \r\n                || error.toString();\r\n\r\n                console.log(message)\r\n                return thunkAPI.rejectWithValue(message)\r\n\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\nconst inventSlice = createSlice ({\r\n    name:\"inventItem\",\r\n    initialState,\r\n    reducers: {\r\n        CALC_STORE_VALUE (state,action){\r\n            console.log(\"store value\")\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        //create item function\r\n        .addCase(createInvent.pending, (state) => {\r\n            state.isLoading = true;\r\n        })\r\n        .addCase(createInvent.fulfilled, (state,action) => {\r\n            state.isLoading = false;\r\n            state.isSucess = true;\r\n            state.isError = false;\r\n            console.log(action.payload);\r\n            state.inventItems.push(action.payload);\r\n            //toast.success(\"Item added to the Inventory Successfully\")\r\n        })\r\n        .addCase(createInvent.rejected, (state,action) => {\r\n            state.isLoading = false;\r\n            state.isError = true;\r\n            state.message = action.payload;\r\n            console.error(action.payload);\r\n        })\r\n        \r\n        \r\n\r\n        \r\n    },\r\n});\r\n\r\nexport const {CALC_STORE_VALUE} = inventSlice.actions;\r\nexport const {CALC_OUTOFSTOCK} = inventSlice.actions;\r\nexport const {CALC_CATEGORY} = inventSlice.actions;\r\n\r\n\r\n\r\n//export const selectIsLoading = (state) => state.inventItem.isLoading;\r\nexport const selectIsLoading = (state) => state.inventItem.isLoading;\r\nexport const selectinventItem = (state) => state.inventItem.inventItem;\r\nexport const selectTotalInventValue = (state) => state.inventItem.totalInventValue;\r\nexport const selectOutOfStock = (state) => state.inventItem.outOfStock;\r\nexport const selectCategory = (state) => state.inventItem.category;\r\n\r\nexport default inventSlice.reducer;*/","map":{"version":3,"names":["createSlice","name","localStorage","getItem","initialState","inventItem","itemName","sku","recieveDate","category","condition","brand","initialPrice","initialQuantity","totalPrice","supplier","inventSlice","reducers","SET_NAME","state","action","setItem","JSON","stringify","payload","SET_INVENT","itemDetail","actions","selectName","invent","inventName","selectInvent","reducer"],"sources":["C:/Users/Achinika/Documents/ITP Project/Shantha Motors/inventoryModule/inventoryModule/frontend2/src/redux/features/invent/inventSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst name = localStorage.getItem(\"itemName\");\r\n\r\nconst initialState= {\r\n    name: name ? name: \"\",\r\n    inventItem : {\r\n        itemName: \"\",\r\n        sku: \"\",\r\n        recieveDate: \"\",\r\n        category: \"\",\r\n        condition: \"\",\r\n        brand: \"\",\r\n        initialPrice: \"\",\r\n        initialQuantity: \"\",\r\n        totalPrice: \"\",\r\n        supplier: \"\",\r\n    },\r\n}\r\n\r\nconst inventSlice = createSlice({\r\n    name: \"invent\",\r\n    initialState,\r\n    reducers:{\r\n        SET_NAME(state, action){\r\n            localStorage.setItem(\"itemName\", JSON.stringify(action.payload));\r\n            state.name = action.payload;\r\n        },\r\n        SET_INVENT(state, action){\r\n            const itemDetail = action.payload;\r\n            state.inventItem.itemName = itemDetail.itemName;\r\n            state.inventItem.sku = itemDetail.sku;\r\n            state.inventItem.recieveDate = itemDetail.recieveDate;\r\n            state.inventItem.category = itemDetail.category;\r\n            state.inventItem.condition = itemDetail.condition;\r\n            state.inventItem.brand = itemDetail.brand;\r\n            state.inventItem.initialPrice = itemDetail.initialPrice;\r\n            state.inventItem.initialQuantity = itemDetail.initialQuantity;\r\n            state.inventItem.totalPrice = itemDetail.totalPrice;\r\n            state.inventItem.supplier = itemDetail.supplier;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {SET_NAME, SET_INVENT} = inventSlice.actions;\r\n\r\n//exporting an inidividual state\r\nexport const selectName = (state) => state.invent.inventName;\r\nexport const selectInvent = (state) => state.invent.inventItem;\r\n\r\nexport default inventSlice.reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport inventService from \"./inventService\";\r\n\r\n\r\nconst initialState ={\r\n    invent: null,\r\n    invents: [],\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: \"\",\r\n\r\n};\r\n\r\n//create new invent item and createAsyncThunk to execute http request\r\nexport const createInvent = createAsyncThunk(\r\n    \"invents/create\",\r\n    async(formData, thunkAPI) =>{\r\n        try {\r\n            return await inventService.createInvent(formData)\r\n\r\n        } catch (error) {\r\n            const message = (\r\n            error.response && error.response.data && error.response.data.message\r\n           ) \r\n           || error.message \r\n           || error.toString();\r\n\r\n           console.log(message);\r\n           return thunkAPI.rejectWithValue(message)\r\n        }\r\n    }\r\n)\r\n\r\n\r\nconst inventSlice = createSlice({\r\n    name: \"invent\",\r\n    initialState,\r\n    reducers: {\r\n        CALC_STORE_VALUE(state, action){\r\n            console.log(\"Invent value\");\r\n        }\r\n    },\r\n    extraReducers:(builder) =>{\r\n        builder\r\n        .addCase(createInvent.pending, (state) =>{\r\n            state.isLoading = true;\r\n        })\r\n        .addCase(createInvent.fulfilled, (state, action) =>{\r\n            state.isLoading = false;\r\n            state.isSuccess = true;\r\n            state.isError = false;\r\n            console.log(action.payload);\r\n            state.invents.push (action.payload);\r\n            console.success (\"Item added Successfully\")\r\n        })\r\n        .addCase(createInvent.rejected, (state, action) =>{\r\n            state.isLoading = false;\r\n            state.isError = true;\r\n            state.message = action.payload;\r\n            console.error(action.payload);           \r\n        })\r\n    }\r\n});\r\n\r\nexport const {CALC_STORE_VALUE} = inventSlice.actions;\r\nexport const selectIsLoading = (state) => state.invent.isLoading;\r\nexport default inventSlice.reducer*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { createSlice } from '@reduxjs/toolkit'\r\nconst name = JSON.parse(localStorage.getItem(\"name\"))\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n\r\n    name: name ? name : \"\",\r\n    inventory: {\r\n        itemName: \"\",\r\n        sku: \"\",\r\n        recieveDate: \"\",\r\n        category: \"\",\r\n        condition: \"\",\r\n        brand: \"\",\r\n        initialPrice: \"\",\r\n        initialQuantity: \"\",\r\n        totalPrice: \"\",\r\n        supplier: \"\",\r\n    },\r\n}\r\n\r\nconst inventSlice = createSlice({\r\n    name: \"inventItem\",\r\n    initialState,\r\n    reducers: {\r\n        \r\n        SET_INVENT(state, action) {\r\n            const invent = action.payload;\r\n            state.inventory.itemName = invent.itemName;\r\n            state.inventory.sku = invent.sku;\r\n            state.inventory.recieveDate = invent.recieveDate;\r\n            state.inventory.category = invent.category;\r\n            state.inventory.condition = invent.condition;\r\n            state.inventory.brand = invent.brand;\r\n            state.inventory.initialPrice = invent.initialPrice;\r\n            state.inventory.initialQuantity = invent.initialQuantity;\r\n            state.inventory.totalPrice = invent.totalPrice;\r\n            state.inventory.supplier = invent.supplier;\r\n        },\r\n    },\r\n});\r\n\r\n\r\nexport const {SET_INVENT } = inventSlice.actions;\r\n\r\n//exporting an individual state\r\nexport const selectIsLoggedIn = (state) => state.inventItem.isLoggedIn\r\nexport const selectName = (state) => state.inventItem.name\r\nexport const selectInvent = (state) => state.inventItem.inventory\r\nexport const selectFilteredInvent = (state) => state.inventItem.filteredInvent;\r\n\r\nexport default inventSlice.reducer;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\n//import inventService from \"./inventService\";\r\n/*import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {toast} from 'react-toastify'\r\n\r\nconst initialState = {\r\n    inventItem: null,\r\n    inventItems: [],\r\n    isError: false,\r\n    isSucess:false,\r\n    isLoading: false,\r\n    message:\"\",\r\n    totalInventValue: 0,\r\n    outOfStock: 0,\r\n    category: [],\r\n};\r\n\r\n//CREATE NEW INVENT ITEM\r\nexport const createInvent = createAsyncThunk(\r\n    \"InventItems/create\",\r\n    async(formData, thunkAPI) => {\r\n        try {\r\n            return await inventService.createInvent(formData)\r\n\r\n        } catch (error) {\r\n            const message = (error.response && error.response.data && \r\n                error.response.data.message) \r\n                || error.message \r\n                || error.toString();\r\n\r\n                console.log(message)\r\n                return thunkAPI.rejectWithValue(message)\r\n\r\n        }\r\n    }\r\n);\r\n\r\n\r\n\r\nconst inventSlice = createSlice ({\r\n    name:\"inventItem\",\r\n    initialState,\r\n    reducers: {\r\n        CALC_STORE_VALUE (state,action){\r\n            console.log(\"store value\")\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        //create item function\r\n        .addCase(createInvent.pending, (state) => {\r\n            state.isLoading = true;\r\n        })\r\n        .addCase(createInvent.fulfilled, (state,action) => {\r\n            state.isLoading = false;\r\n            state.isSucess = true;\r\n            state.isError = false;\r\n            console.log(action.payload);\r\n            state.inventItems.push(action.payload);\r\n            //toast.success(\"Item added to the Inventory Successfully\")\r\n        })\r\n        .addCase(createInvent.rejected, (state,action) => {\r\n            state.isLoading = false;\r\n            state.isError = true;\r\n            state.message = action.payload;\r\n            console.error(action.payload);\r\n        })\r\n        \r\n        \r\n\r\n        \r\n    },\r\n});\r\n\r\nexport const {CALC_STORE_VALUE} = inventSlice.actions;\r\nexport const {CALC_OUTOFSTOCK} = inventSlice.actions;\r\nexport const {CALC_CATEGORY} = inventSlice.actions;\r\n\r\n\r\n\r\n//export const selectIsLoading = (state) => state.inventItem.isLoading;\r\nexport const selectIsLoading = (state) => state.inventItem.isLoading;\r\nexport const selectinventItem = (state) => state.inventItem.inventItem;\r\nexport const selectTotalInventValue = (state) => state.inventItem.totalInventValue;\r\nexport const selectOutOfStock = (state) => state.inventItem.outOfStock;\r\nexport const selectCategory = (state) => state.inventItem.category;\r\n\r\nexport default inventSlice.reducer;*/\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAE5C,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AAE7C,MAAMC,YAAY,GAAE;EAChBH,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAE,EAAE;EACrBI,UAAU,EAAG;IACTC,QAAQ,EAAE,EAAE;IACZC,GAAG,EAAE,EAAE;IACPC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE;EACd;AACJ,CAAC;AAED,MAAMC,WAAW,GAAGhB,WAAW,CAAC;EAC5BC,IAAI,EAAE,QAAQ;EACdG,YAAY;EACZa,QAAQ,EAAC;IACLC,QAAQA,CAACC,KAAK,EAAEC,MAAM,EAAC;MACnBlB,YAAY,CAACmB,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACH,MAAM,CAACI,OAAO,CAAC,CAAC;MAChEL,KAAK,CAAClB,IAAI,GAAGmB,MAAM,CAACI,OAAO;IAC/B,CAAC;IACDC,UAAUA,CAACN,KAAK,EAAEC,MAAM,EAAC;MACrB,MAAMM,UAAU,GAAGN,MAAM,CAACI,OAAO;MACjCL,KAAK,CAACd,UAAU,CAACC,QAAQ,GAAGoB,UAAU,CAACpB,QAAQ;MAC/Ca,KAAK,CAACd,UAAU,CAACE,GAAG,GAAGmB,UAAU,CAACnB,GAAG;MACrCY,KAAK,CAACd,UAAU,CAACG,WAAW,GAAGkB,UAAU,CAAClB,WAAW;MACrDW,KAAK,CAACd,UAAU,CAACI,QAAQ,GAAGiB,UAAU,CAACjB,QAAQ;MAC/CU,KAAK,CAACd,UAAU,CAACK,SAAS,GAAGgB,UAAU,CAAChB,SAAS;MACjDS,KAAK,CAACd,UAAU,CAACM,KAAK,GAAGe,UAAU,CAACf,KAAK;MACzCQ,KAAK,CAACd,UAAU,CAACO,YAAY,GAAGc,UAAU,CAACd,YAAY;MACvDO,KAAK,CAACd,UAAU,CAACQ,eAAe,GAAGa,UAAU,CAACb,eAAe;MAC7DM,KAAK,CAACd,UAAU,CAACS,UAAU,GAAGY,UAAU,CAACZ,UAAU;MACnDK,KAAK,CAACd,UAAU,CAACU,QAAQ,GAAGW,UAAU,CAACX,QAAQ;IACnD;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACG,QAAQ;EAAEO;AAAU,CAAC,GAAGT,WAAW,CAACW,OAAO;;AAEzD;AACA,OAAO,MAAMC,UAAU,GAAIT,KAAK,IAAKA,KAAK,CAACU,MAAM,CAACC,UAAU;AAC5D,OAAO,MAAMC,YAAY,GAAIZ,KAAK,IAAKA,KAAK,CAACU,MAAM,CAACxB,UAAU;AAE9D,eAAeW,WAAW,CAACgB,OAAO;;AAqBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAm},"metadata":{},"sourceType":"module","externalDependencies":[]}